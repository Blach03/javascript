//- @author Stanisław Polak <polak@agh.edu.pl>

doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Form
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/mocha/mocha.css")
        style.
            table {
                width: 100%;
            }
            td {
                border: 1px solid #000; 
                padding: 15px;
                text-align: left;
            }
            th {
                background-color: #04AA6D;
                color: white;
            }
        script.
            /**************************************************************************************/
            /* Function that retrieves the content of one of the selected text fields of the form */
            /**************************************************************************************/
            function getName(http_method){
                let name = '';

                // Assign the 'name' variable to the value of the 'name_GET' or 'name_POST' form field
                if(http_method === 'GET') {
                    name = document.getElementById('name_GET').value;
                } else if(http_method === 'POST') {
                    name = document.getElementById('name_POST').value;
                }

                return name;
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server using Fetch API      */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "xml"]                                            */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            async function requestFetchAPI(http_method, response_type, name, show_alert=false) {
                let accept = '*/*';

                switch(response_type){
                    case 'json':
                        accept = 'application/json';
                        break;
                    case 'xml':
                        accept = 'application/xml';
                        break;
                }

                const requestOptions = {
                    method: http_method,
                    credentials: "include", // Do not modify or remove
                    headers: {
                        Accept: accept
                    }
                };

                if (http_method === 'POST') {
                    requestOptions.headers['Content-Type'] = 'application/x-www-form-urlencoded';
                    requestOptions.body = `name=${encodeURIComponent(name)}`;
                }

                const url = http_method === 'GET' 
                            ? `http://localhost:8000/submit?name=${encodeURIComponent(name)}`
                            : 'http://localhost:8000/submit';

                try {
                    const response = await fetch(url, requestOptions);

                    if (!response.ok) {
                        throw new Error(response.statusText);
                    }

                    console.group('Fetch API');
                    console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                    
                    let result;
                    if (response_type === 'json') {
                        result = await response.json();
                    } else {
                        result = await response.text();
                    }

                    console.log(result);
                    console.groupEnd();   
                    if(show_alert) {
                        let alertMessage;
                        switch(response_type) {
                            case 'json':
                                alertMessage = JSON.stringify(result, null, 2);
                                break;
                            case 'xml':
                                alertMessage = result;
                                break;
                            default:
                                alertMessage = result;
                        }
                        document.getElementById('result').textContent = alertMessage;
                    } else {
                        results.set(`fetch ${http_method} ${response_type}`, result);
                        dispatchEvent(received);
                    }
                } catch (error) {
                    window.alert(error);
                }
            }

            function getTime(europe_city) {
                return new Promise(async (resolve, reject) => {
                    try {
                        const response = await fetch(`http://worldtimeapi.org/api/timezone/Europe/${europe_city}`);
                        
                        if (response.status === 200) {
                            const data = await response.json();
                            resolve(data);
                        } else if (response.status === 404) {
                            const errorText = await response.text();
                            reject(errorText);
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            }

            async function displayTime() {
                const city = document.getElementById('city').value;
                try {
                    const timeData = await getTime(city);
                    document.getElementById('timeResult').textContent = `Current time in ${city}: ${timeData.datetime}`;
                } catch (error) {
                    document.getElementById('timeResult').textContent = `Error: ${error}`;
                }
            }
        script(src="https://cdn.jsdelivr.net/npm/mocha/mocha.js") 
        script(type="module").
            import { expect } from 'https://cdn.jsdelivr.net/npm/chai/chai.js' 
            window.expect = expect
    body
        script(class="mocha-init").
            mocha.setup('bdd');
            mocha.checkLeaks(); 
        main
            table
                tr
                    th  
                    th GET
                    th POST
                tr 
                    th(colspan='3' style=' background-color: #04556D;') Without AJAX and Fetch API
                tr
                    th HTTP
                    td 
                        form(action="http://localhost:8000/submit" method="GET")
                            label(for="name_GET") Your name
                            input(type="text" id="name_GET" name="name")
                            br
                            input(type="submit" value="text")
                    td 
                        form(action="http://localhost:8000/submit" method="POST") 
                            label(for="name_POST") Your name
                            input(type="text" id="name_POST" name="name")
                            br
                            input(type="submit" value="text")
                tr 
                    th(colspan='3' style=' background-color: #04556D;')  Asynchronous requests
                tr 
                    th AJAX 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "document"]
                                button(onclick=`console.clear() ; requestAJAX("${method}","${type}", getName('${method}'), true)`) #{type}
                tr 
                    th Fetch API 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "xml"]
                                button(onclick=`console.clear() ; requestFetchAPI("${method}","${type}", getName('${method}'), true)`) #{type}
                tr
                    th(colspan='3' style=' background-color: #04556D;') Get Time from World Time API
                tr
                    td(colspan='3')
                        label(for="city") Enter city
                        input(type="text" id="city" name="city")
                        button(onclick="displayTime()") Get Time
                        div(id="timeResult") Current time will be displayed here.
        h1 Unit tests
        button(onclick='window.location.reload();') Restart
        div(id="mocha")
        script.
            const name = 'John Doe ą/?:@&=+$#';

            if(window.location.port == 8000) { 
                window.addEventListener("load", (event) => {
                    for(let method of ["GET","POST"]){
                        for(let type of ["text", "json", "document"])
                            requestAJAX(method, type, name);                        
                        for(let type of ["text", "json", "xml"])
                            requestFetchAPI(method, type, name);
                    }
                })
            };
        script(class="mocha-exec").
            //****************************************************************************************
            // Unit tests
            //****************************************************************************************
            var results = new Map();
            var received = new Event('received');
            var test_executed = false;

            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;

                return txt.value;
            }

            addEventListener('received', (e) => {
                if(!test_executed && results.size === 12){
                    const parser = new DOMParser();
                    const xml_document= parser.parseFromString("<welcome>Hello 'John Doe ą/?:@&amp;=+$#'</welcome>","text/xml");

                    describe('AJAX requests', function() {
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','text')`, function() {
                            expect(results.get('ajax GET text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','json')`, function() {
                            expect(results.get('ajax GET json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','document')`, function() {
                            expect(results.get('ajax GET document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','text')`, function() {
                            expect(results.get('ajax POST text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','json')`, function() {
                            expect(results.get('ajax POST json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','document')`, function() {
                            expect(results.get('ajax POST document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                    });

                    describe('Fetch API requests', function() {   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','text')`, async function() {
                            const result  = await results.get('fetch GET text')
                            expect(result).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','json')`, async function() {
                            const result  = await results.get('fetch GET json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','xml')`, async function() {
                            const result  = await results.get('fetch GET xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        }); 
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','text')`, async function() {
                            const result  = await results.get('fetch POST text')
                            expect(result).to.equal(`Hello '${name}'`);                   
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','json')`, async function() {
                            const result  = await results.get('fetch POST json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','xml')`, async function() {
                            const result  = await results.get('fetch POST xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        });    
                    });     

                    mocha.run();
                    test_executed = true;
                }
            });        